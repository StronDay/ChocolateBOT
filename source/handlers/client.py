from aiogram import types, Dispatcher
from create_bot import dp, bot
from keyboards import get_inline_keyboard, get_reg_keyboard
from services import yaml_worker
from filters import button_filter
from data_base import sql_worker
from aiogram.dispatcher.filters import Text
import random
from services import MessageWorker

message_worker = MessageWorker()

#hobby_button_handler"
async def hobby_button(message : types.Message):
    message_worker.save_message(message.text)
    await bot.send_message(message.from_user.id, f"–ß—Ç–æ –Ω–∞–¥–æ –≤ –ª–æ–∫–∞—Ü–∏–∏ {message.text}?", reply_markup = get_inline_keyboard(message.text))

#–∑–∞–ø–∏—Å–∞—Ç—å—Å—è
async def insert_visitor(call : types.CallbackQuery):
    if await sql_worker.is_Trusted(call.from_user.id):
        period = await sql_worker.is_final()
        if period == False:
            await sql_worker.insert_visitor(call.from_user.id, yaml_worker.get_location(call.data.split(",")[0]), "visitors", "time_interval")
            await bot.send_message(call.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å")
        else:
            button_name = yaml_worker.get_button_name(await sql_worker.get_last_location(call.from_user.id))
            await bot.send_message(call.from_user.id, F"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ –∑–∞–∫–æ–Ω–∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤\n{button_name}.\n\n–í—Ä–µ–º—è –¥–æ –∫–æ–Ω—Ü–∞: \n{period}")
    else:
        await bot.send_message(call.from_user.id, F"–õ–∏–±–æ –≤—ã –∑–∞—Ö–æ–¥–∏–ª–∏ –∫ –Ω–∞–º –≤ –≥–æ—Å—Ç–∏ –¥–∞–≤–Ω–æ,\n–ª–∏–±–æ –≤–æ–æ–±—â–µ –Ω–µ –±—ã–ª–∏ —É –Ω–∞—Å üòî.\n–í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n–∏ –ø–æ–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup = get_reg_keyboard(message_worker.get_message()))

#—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
async def registration(call : types.CallbackQuery):
    code = random.randint(1000, 9999)
    
    await sql_worker.insert_visitor(call.from_user.id, yaml_worker.get_location(call.data.split(",")[0]), "visitors_waiting", "waiting_time_interval", code)
    await bot.send_message(call.from_user.id, f"–°–∫–∞–∂–∏—Ç–µ –∏–ª–∏ –ø–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n{code}")

#—É–∑–Ω–∞—Ç—å –∫–æ–ª-–≤–æ –ø–æ—Å–∏—Ç–∏—Ç–µ–ª–µ–π
async def get_count_visitor(call : types.CallbackQuery):
    button_name = call.data.split(',')[0]
    await bot.send_message(call.from_user.id, f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ {button_name}: {await sql_worker.get_amount_visitors(button_name)}")

#–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
async def get_info_session(message : types.Message):
    await bot.send_message(message.from_user.id, f"–ò–Ω—Ñ–æ")

def register_handlers_client(dp : Dispatcher):
    dp.register_callback_query_handler(registration, lambda query: query.data.split(",")[1] == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    dp.register_callback_query_handler(insert_visitor, button_filter.isInsert())
    dp.register_callback_query_handler(get_count_visitor, button_filter.isAmount())
    dp.register_message_handler(hobby_button, button_filter.isHobbyButton())
    dp.register_message_handler(get_info_session, Text(equals="–∏–Ω—Ñ–æ –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏", ignore_case=True))