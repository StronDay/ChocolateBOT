from aiogram import types, Dispatcher
from filters import button_filter
from create_bot import bot
from data_base import sql_worker
from keyboards import get_inline_keyboard, get_reg_keyboard, training_choise_keyboard, time_keyboard
from keyboards import cd_time, cd_registration, cd_amount_vis, cd_insert_vis
from services import yaml_worker
from services import MessageWorker
from aiogram.dispatcher.filters import Text
import random
from aiogram.dispatcher.filters.state import State, StatesGroup

message_worker = MessageWorker()

class FSMClient(StatesGroup):
    time = State()

#hobby_button_handler"
async def hobby_button(message : types.Message):
    message_worker.save_message(message.text)
    await bot.send_message(message.from_user.id, f"–ß—Ç–æ –Ω–∞–¥–æ –≤ –ª–æ–∫–∞—Ü–∏–∏ {message.text}?", reply_markup = get_inline_keyboard(message.text))

#–∑–∞–ø–∏—Å–∞—Ç—å—Å—è
async def insert_visitor(call : types.CallbackQuery, callback_data: dict):
    if await sql_worker.is_Trusted(call.from_user.id):
        period = await sql_worker.is_final()
        if period == False:
            await sql_worker.insert_visitor(call.from_user.id, yaml_worker.get_location(callback_data.get("button")))
            await bot.send_message(call.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å")
        else:
            button_name = yaml_worker.get_button_name(await sql_worker.get_last_location(call.from_user.id))
            await bot.send_message(call.from_user.id, F"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ –∑–∞–∫–æ–Ω–∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤\n{button_name}.\n\n–í—Ä–µ–º—è –¥–æ –∫–æ–Ω—Ü–∞: \n{period}", reply_markup = training_choise_keyboard)
    else:
        await bot.send_message(call.from_user.id, F"–õ–∏–±–æ –≤—ã –∑–∞—Ö–æ–¥–∏–ª–∏ –∫ –Ω–∞–º –≤ –≥–æ—Å—Ç–∏ –¥–∞–≤–Ω–æ,\n–ª–∏–±–æ –≤–æ–æ–±—â–µ –Ω–µ –±—ã–ª–∏ —É –Ω–∞—Å üòî.\n–í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n–∏ –ø–æ–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup = get_reg_keyboard(message_worker.get_message()))

#—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
async def registration(call : types.CallbackQuery, callback_data: dict):
    code = random.randint(1000, 9999)
    
    await sql_worker.insert_waiting(call.from_user.id, yaml_worker.get_location(callback_data.get("button")), code)
    await bot.send_message(call.from_user.id, f"–°–∫–∞–∂–∏—Ç–µ –∏–ª–∏ –ø–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n{code}")

#—É–∑–Ω–∞—Ç—å –∫–æ–ª-–≤–æ –ø–æ—Å–∏—Ç–∏—Ç–µ–ª–µ–π
async def get_count_visitor(call : types.CallbackQuery, callback_data: dict):
    button_name = callback_data.get("button")
    await bot.send_message(call.from_user.id, f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ {button_name}: {await sql_worker.get_amount_visitors(button_name)}")

#–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
async def get_info_session(message : types.Message):
    period = await sql_worker.is_final()

    if period == False:
        await bot.send_message(message.from_user.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç\n–Ω–∞—á–∞—Ç—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ—Ç")
    else:
        button_name = yaml_worker.get_button_name(await sql_worker.get_last_location(message.from_user.id))
        await bot.send_message(message.from_user.id, F"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ –∑–∞–∫–æ–Ω–∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤\n{button_name}.\n\n–í—Ä–µ–º—è –¥–æ –∫–æ–Ω—Ü–∞: \n{period}", reply_markup = training_choise_keyboard)

#–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é
async def complete_traning(call : types.CallbackQuery):
    period = await sql_worker.is_final()
    if period == False:
        await bot.send_message(call.from_user.id, f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–∂–µ –æ–∫–æ–Ω—á–µ–Ω–∞")
    else:
        await sql_worker.complete_time(call.from_user.id)
        await bot.send_message(call.from_user.id, f"–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")

#–ü—Ä–æ–¥–ª–∏—Ç—å —Å–µ—Å—Å–∏—é 1
async def extend_tranning(call : types.CallbackQuery):
    await FSMClient.time.set()
    await bot.send_message(call.from_user.id, f"–í—ã–±–µ—Ä–µ—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å: ", reply_markup = time_keyboard)

#–ü—Ä–æ–¥–ª–∏—Ç—å —Å–µ—Å—Å–∏—é 2
async def extend_tranning_time(call : types.CallbackQuery,  callback_data: dict, state : FSMClient):
    async with state.proxy() as data:
        data["time"] = callback_data.get("time")

    await sql_worker.extend_time(call.from_user.id, data["time"])

    await bot.send_message(call.from_user.id, "–í—Ä–µ–º—è –ø—Ä–æ–¥–ª–µ–Ω–æ")
    await state.finish()

#dp.register_callback_query_handler(extend_tranning_time_no, lambda query: query.data.split(",")[1] == "–ü—Ä–æ–¥–ª–∏—Ç—å_–∫–Ω–æ–ø–∫–∞")
#async def extend_tranning_time_no(call : types.CallbackQuery):
#    await bot.send_message(call.from_user.id, "–í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–æ")

def register_handlers_client(dp : Dispatcher):
    dp.register_callback_query_handler(extend_tranning, lambda query: query.data == "–ü—Ä–æ–¥–ª–∏—Ç—å", state=None)
    dp.register_callback_query_handler(complete_traning, lambda query: query.data == "–ó–∞–≤–µ—Ä—à–∏—Ç—å")
    dp.register_callback_query_handler(extend_tranning_time, cd_time.filter(), state=FSMClient.time)
    dp.register_callback_query_handler(registration, cd_registration.filter())
    dp.register_callback_query_handler(insert_visitor, cd_insert_vis.filter())
    dp.register_callback_query_handler(get_count_visitor, cd_amount_vis.filter())
    dp.register_message_handler(hobby_button, button_filter.isHobbyButton())
    dp.register_message_handler(get_info_session, Text(equals="–∏–Ω—Ñ–æ –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏", ignore_case=True))